= Status

Stable enough for testing, but not tested enough for production use.

= Install

You need:

* Ruby 1.9 or compatible

    gem install activesupport i18n

* gcc and be able to compile mruby

    # brew install bison  # for OSX
    # sudo apt-get install bison libbison-dev -y  # Ubuntu

Then install:

  git clone git://github.com/mrbrdo/mruby_cc.git
  git submodule init
  git submodule update

  ./setup.sh

The setup.sh script compiles mruby, mrblib and the runner executable.
You should probably re-run setup.sh when you git pull.

= Use

  echo "puts 'hello world'" > test.rb
  ./mrbcc_compile test.rb

  ./runner test.so

= Include Mrblib

Now mrblib is included automatically.

= Known bigger bugs

* On Linux 2 tests from mruby test suite don't pass. (they pass on OSX) Working on it.

= Dynamic loading of other files

Now it is possible to dynamically load other pre-compiled ruby files.

  # some_ruby_file.rb
  load_compiled_mrb "dyn.so"

I recommend you use the full file path.

= Example

Example to run mruby test suite:

  ./mrbcc_compile testsuite.rb
  ./runner testsuite.so

= Can I use compiled and non-compiled mruby code at the same time?

No, right now this does not work well. But it should be possible in the future.

= Can I call C code?

You can compile a .so with an extern mrbb_exec_entry_point, then you can load this module
with load_compiled_mrb. For more details look at the build/mrbcc_out.c file.

= Performance on mruby test suite

Compiled

  Total: 499
     OK: 499
     KO: 0
  Crash: 0
   Time: 0.009083 seconds

mruby interpreted

  Total: 499
     OK: 499
     KO: 0
  Crash: 0
  Time: 0.566691 seconds

Pretty good :-)

= Performance

Right now the performance of method calling should be improved. But we can see some performance improvement with tight loops (note I use while because each will use method calling on Proc).

  i = 0

  while i < 1000000000
    5 * 1.7
    i += 1
  end

  puts i

Compiled

  real  0m12.952s

Mruby interpreter

  real  1m14.385s
