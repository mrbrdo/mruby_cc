= Status

Not stable for any kind of use. Buggy.

= Usage

  git clone git@github.com:mrbrdo/mruby_cc.git
  git submodule init
  git submodule update

  cd mruby && make
  cd ..

  echo "puts 'hello world'" > test.rb
  ruby mrbcc.rb test.rb

  ./test

Must compile also parts of mrblib (e.g. mruby/mrblib/enum.rb) that you use, because currently interacting with non-compiled code is not working. See Include Mrblib section.
Note you must use *Ruby* *MRI* to run mrbcc.rb, not mruby!

= Include Mrblib

You *must* include the whole mrblib (mruby standard library) or your program will not work properly. This is because currently interaction with interpreted code is not working, but it is possible in the future.

To include mrblib, add this to the top of your .rb file that you are compiling:

  #include 'mruby/mrblib/array.rb'
  #include 'mruby/mrblib/enum.rb'
  #include 'mruby/mrblib/class.rb'
  #include 'mruby/mrblib/compar.rb'
  #include 'mruby/mrblib/error.rb'
  #include 'mruby/mrblib/hash.rb'
  #include 'mruby/mrblib/kernel.rb'
  #include 'mruby/mrblib/numeric.rb'
  #include 'mruby/mrblib/print.rb'
  #include 'mruby/mrblib/range.rb'
  #include 'mruby/mrblib/string.rb'
  #include 'mruby/mrblib/struct.rb'

The #include is just something I made up, it is parsed in mrbcc.rb script. It just takes the file and copies the contents into your main ruby file.

= Example

Example to run mruby test suite:

  ruby mrbcc.rb testsuite.rb

= Performance on mruby test suite

Compiled

  Total: 499
     OK: 499
     KO: 0
  Crash: 0
   Time: 0.009083 seconds

mruby interpreted

  Total: 499
     OK: 499
     KO: 0
  Crash: 0
  Time: 0.566691 seconds

Pretty good :-)

= Performance

Right now the performance of method calling should be improved. But we can see some performance improvement with tight loops (note I use while because each will use method calling on Proc).

  i = 0

  while i < 1000000000
    5 * 1.7
    i += 1
  end

  puts i

Compiled

  real  0m12.952s

Mruby interpreter

  real  1m14.385s
